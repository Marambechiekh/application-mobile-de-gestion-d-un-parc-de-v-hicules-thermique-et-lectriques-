import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class EditModelScreen extends StatefulWidget {
  final DocumentSnapshot modelDoc;

  const EditModelScreen({Key? key, required this.modelDoc}) : super(key: key);

  @override
  _EditModelScreenState createState() => _EditModelScreenState();
}

class _EditModelScreenState extends State<EditModelScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late String _selectedType;
  static const Color _primaryColor = Color(0xFF6C5CE7);
  static const Color _secondaryColor = Color(0xFFFF7043);

  @override
  void initState() {
    super.initState();
    final data = widget.modelDoc.data() as Map<String, dynamic>;
    _nameController = TextEditingController(text: data['nom']);
    _selectedType = data['type'] ?? 'electrique';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Modifier le Modèle',
            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
        centerTitle: true,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [_primaryColor, _primaryColor.withOpacity(0.8)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
       
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              Card(
                elevation: 4,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15)),
                child: Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    children: [
                      _buildTypeDropdown(),
                      SizedBox(height: 20),
                      _buildNameField(),
                    ],
                  ),
                ),
              ),
              SizedBox(height: 30),
              _buildSubmitButton(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTypeDropdown() {
    return DropdownButtonFormField<String>(
      value: _selectedType,
      dropdownColor: Colors.white,
      icon: Icon(Icons.arrow_drop_down, color: _primaryColor),
      decoration: InputDecoration(
        labelText: 'Type de véhicule',
        labelStyle: TextStyle(color: Colors.grey[600]),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10),
          borderSide: BorderSide(color: Colors.grey)),
        filled: true,
        fillColor: Colors.grey[50],
      ),
      items: [
        DropdownMenuItem(
          value: 'electrique',
          child: Row(
            children: [
              Icon(Icons.electric_bolt, color: _secondaryColor),
              SizedBox(width: 10),
              Text('Électrique',
                  style: TextStyle(fontWeight: FontWeight.bold)),
            ],
          ),
        ),
        DropdownMenuItem(
          value: 'thermique',
          child: Row(
            children: [
              Icon(Icons.local_gas_station, color: Colors.grey[600]),
              SizedBox(width: 10),
              Text('Thermique',
                  style: TextStyle(fontWeight: FontWeight.bold)),
            ],
          ),
        ),
      ],
      onChanged: (value) => setState(() => _selectedType = value!),
    );
  }

  Widget _buildNameField() {
    return TextFormField(
      controller: _nameController,
      style: TextStyle(fontSize: 16),
      decoration: InputDecoration(
        labelText: 'Nom du modèle',
        prefixIcon: Icon(Icons.directions_car, color: _primaryColor),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(10)),
        filled: true,
        fillColor: Colors.grey[50],
      ),
      validator: (value) => value!.isEmpty ? 'Champ obligatoire' : null,
    );
  }

  Widget _buildSubmitButton() {
    return Center(
      child: ElevatedButton.icon(
        icon: Icon(Icons.save, color: Colors.white),
        label: Text(
          'SAUVEGARDER',
          style: TextStyle(color: Colors.white, letterSpacing: 1.2)),
        style: ElevatedButton.styleFrom(
          backgroundColor: _primaryColor,
          padding: EdgeInsets.symmetric(horizontal: 40, vertical: 15),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10)),
        ),
        onPressed: _updateModel,
      ),
    );
  }

  Future<void> _updateModel() async {
    if (_formKey.currentState!.validate()) {
      try {
        await FirebaseFirestore.instance
            .collection('modeles')
            .doc(widget.modelDoc.id)
            .update({
          'nom': _nameController.text,
          'type': _selectedType,
          'updatedAt': FieldValue.serverTimestamp(),
        });

        Navigator.pop(context);
        _showSnackBar('Modèle mis à jour avec succès', Colors.green);
      } catch (e) {
        _showSnackBar('Erreur: $e', Colors.red);
      }
    }
  }

  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    super.dispose();
  }
}